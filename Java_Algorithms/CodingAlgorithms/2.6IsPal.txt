import java.util.Arrays;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
public class IsPal{
    public static void main(String []args){
        LinkedList l = new LinkedList();
        l.addBack("H");
        l.addBack("O");
        l.addBack("H");
        l.addBack("H");
        l.addBack("H");
        l.addBack("H");
        l.addBack("L");
        l.addBack("H");
        System.out.println(isPal(l));
    }
    static boolean isPal(LinkedList l){
        if(l.head==null){
            return false;
        }
        if(l.head.next==null){
            return true;
        }
        HashMap<Integer,String> map = new HashMap<>();
        int len = 0;
        Node ptr = l.head;
        int index = 0;
        while(ptr!=null){
            len++;
            ptr = ptr.next;
        }
        ptr = l.head;
        while(ptr!=null){
            if(len%2 == 0){
                if(index >= len/2){
                    if(!map.get(index).equals(ptr.data)){
                        return false;
                    }
                } else {
                    map.put(len-index-1,ptr.data);
                }
            } else {
                if(index == (int)(len/2)){}
                else if(index >= (int)(len/2)+1){
                    if(!map.get(index).equals(ptr.data)){
                        return false;
                    }
                } else {
                    map.put(len-index-1,ptr.data);
                }
            }
            ptr = ptr.next;
            index++;
        }
        return true;
    }
}
class Node{
    public Node next;
    String data;
    
    public Node(String data, Node next){
        this.next = next;
        this.data = data;
    }
    public Node(){}
}
class LinkedList{
    public Node head;
    int size;
    
    public LinkedList(){
        head = null;
        size = 0;
    }
    public void addFront(String data){
        Node n = new Node(data,null);
        if(head == null){
            head = n;
            return;
        }
        n.next = this.head;
        head = n;
    }
    public void addBack(String data){
        Node n = new Node(data, null);
        if(head==null){
            head = n;
            return;
        }
        Node ptr = head;
        while(ptr!=null){
            if(ptr.next == null){
                ptr.next = n;
                return;
            }
            ptr = ptr.next;
        }
    }
    public void print(){
        if(head==null)
            return;
        Node ptr = this.head;
        while(ptr!=null){
            System.out.print(ptr.data+ "---->");
            ptr = ptr.next;
        }
        System.out.println();
    }
}

Runtime: O(N)