**Check Permutation: Given two strings, write a method to decide if one is a permutation of the
other. 

#Solution 1: Hashing
   public static void main(String[] args){
        String str1 = "first";
        String str2 = "tsrif";
        String str3 = "hello";
        System.out.println(isPerm(str1,str2));
    }
    
    static boolean isPerm(String str1, String str2){
        if(str1.length() != str2.length()){
            return false;
        }
        String[] arr = new String[str2.length()];
        LinkedList<String>[] vertex = new LinkedList[str2.length()];
        for(int i = 0;i<str2.length();i++){
            String charToStr = Character.toString(str2.charAt(i));
            int index = charToStr.hashCode() % str2.length();
            arr[index] = charToStr;
            if(vertex[index]==null){
                vertex[index] = new LinkedList<String>();
            }
            vertex[index].add(charToStr);
        }
        System.out.println();
        for(int j = 0; j<str1.length();j++){
            String charToStr = Character.toString(str1.charAt(j));
            int index = charToStr.hashCode() % str1.length();
            if(vertex[index]==null || !vertex[index].contains(charToStr)){
                return false;
            }
        }
        return true;
    }

Runtime: O(N*D)
Space:   O(N*D)
