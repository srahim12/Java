import java.util.Arrays;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
public class DeleteMiddleNode2.3{

    public static void main(String[] args){
        LinkedList l = new LinkedList();
        l.addFront(1);
        l.addFront(7);
        l.addFront(45);
        //l.addFront(4);
        //l.addFront(5);
        //l.addFront(1);
        //l.addFront(9);
        l.print();
        l = delMid(l);
        l.print();
    }
    static LinkedList delMid(LinkedList l){
        if(l.head == null)
            return null;
        int len = 0;
        Node ptr = l.head;
        while(ptr!=null){
            len++;
            ptr = ptr.next;
        }
        if(len<3)
            return l;
        ptr = l.head.next;
        Node prev = l.head;
        int i = 0;
        int mid = getMid(len);
        for(int i = 0;i<len;i++){
            if(i== mid){
                prev.next = ptr.next;
                break;
            }
            prev = prev.next;
            ptr = ptr.next;
        }
        return l;
    }
    
    static int getMid(int n){
        int mid = 0;
        if(n%2==0)
            mid = (n/2)-2;
        else 
            mid = (int)((n/2)-1);
        return mid;
    }
    
}
class Node{
    public Node next;
    int data;
    
    public Node(Node next, int data){
        this.next = next;
        this.data = data;
    }
    public Node(){}
}

class LinkedList{
    public Node head;
    int size;
    
    public LinkedList(){
        head = null;
        size = 0;
    }
    public void addFront(int data){
        Node n = new Node(null,data);
        if(head == null){
            head = n;
            return;
        }
        n.next = this.head;
        head = n;
    }
    public void print(){
        if(head==null)
            return;
        Node ptr = this.head;
        while(ptr!=null){
            System.out.print(ptr.data+ "---->");
            ptr = ptr.next;
        }
        System.out.println();
    }
}

Runtime: O(N)